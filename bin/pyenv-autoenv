#!/usr/bin/env bash
# pyenv-autoenv
##
# Maintainer: Alex Kestner <alex.kestner@gmail.com>
#
# Usage/Installation:
#   - echo 'source ~/.pyenv/plugins/pyenv-autoenv/bin/pyenv-autoenv' >> ~/.profile  (or ~/.bash_profile, ~/.bashrc, etc)
##

# installs python version found in .python-version file
_python_version_auto_install(){
    if [ -z "$1" ];then return; fi

    if [ -e ./.python-version ];then
        _PY_VERSION=$(cat ./.python-version)
    elif [ "$(basename "$1")" == ".python-version" ];then
        _PY_VERSION=$(cat "$1")
    else
        _PY_VERSION="$(cat "$(_virtualenv_search_up '.python-version')")"
    fi

    if [ ! -d "$PYENV_ROOT/versions/$_PY_VERSION" ];then
        echo -e "Installing Python $_PY_VERSION"
        pyenv install "${_PY_VERSION}"
        pyenv rehash
    fi
}

# creates (if necessary) and activates the virtualenv named in .python-env
# if no .python-env file is present, calls _virtualenv_auto_deactivate to deactive virtualenv
_virtualenv_auto_activate(){
    if [ -e ".python-env" ]; then
        _PYTHON_ENV='./.python-env'
    else
        _PYTHON_ENV=$(_virtualenv_search_up '.python-env')
    fi

    if [[ -f $_PYTHON_ENV ]];then
        _VENV_PATH="$WORKON_HOME"/$(cat "$_PYTHON_ENV")
        
        # echo -e "_VENV_PATH=$_VENV_PATH"

        # Check to see if already activated to avoid redundant ${_VENV_NAME}ng
        if [ "$VIRTUAL_ENV" != "${_VENV_PATH}" ]; then
            _VENV_NAME=$(basename "${_VENV_PATH}")

            # echo -e "_VENV_NAME=$_VENV_NAME"

            # if virtualenv does not exist, create it
            if [ -d "$_VENV_PATH" ];then
                workon "${_VENV_NAME}"
            else
                if [ -e '.python-version' ];then
                    _PYTHON_VERSION='./.python-version'
                else
                    _PYTHON_VERSION=$(_virtualenv_search_up '.python-version')
                fi

                # echo -e "_PYTHON_VERSION=$_PYTHON_VERSION"

                # fallback to `pyenv version-name`
                if [ ! -z "$_PYTHON_VERSION" ]; then
                    PYTHON_VERSION=$(pyenv version-name)
                else
                    PYTHON_VERSION=$(cat "$_PYTHON_VERSION")
                fi

                # echo -e "PYTHON_VERSION=$PYTHON_VERSION"

                echo -e "Virtualenv $_VENV_NAME does not exist. Adding with current python -> ${PYTHON_VERSION}"
                mkvirtualenv "${_VENV_NAME}" --python "${PYENV_ROOT}"/versions/"${PYTHON_VERSION}"/bin/python
                workon "${_VENV_NAME}"

                unset PYTHON_VERSION
            fi
        fi
    else
        _virtualenv_auto_deactivate
    fi
}

# searches parent directories of `pwd` for a file with the filename passed to $1
_virtualenv_search_up(){
    _CURRENT_DIR=$(pwd)
    while [ "$_CURRENT_DIR" != "/" ]; do
        while read _FILE_PATH; do
            if [ "$(basename "$_FILE_PATH")" == "$1" ];then
                if [ -f "${_FILE_PATH}" ]; then
                   echo "$_FILE_PATH"
                fi
            fi
        done < <(find "$_CURRENT_DIR" -maxdepth 1 -wholename "$1" 2> /dev/null)
        _CURRENT_DIR=$(dirname "$_CURRENT_DIR")
    done
}

# deactivate the current virtualenv using `deactivate`
_virtualenv_auto_deactivate(){
    if type "deactivate" >/dev/null 2>&1; then
        deactivate
    fi
}

# facade-ish function to simplify setting PROMPT_COMMAND
_autoenv_activate(){
    _python_version_auto_install
    _virtualenv_auto_activate
}

# and finally, to make this all work
export PROMPT_COMMAND=_autoenv_activate
if [ -n "$ZSH_VERSION" ]; then
    chpwd(){
        _autoenv_activate
    }
fi
